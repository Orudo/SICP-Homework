(define (have=>? exp)
  (tagged-list? exp `=>))
(define (get=>action exp)
  (caddr exp))
(define (expand-clauses clauses)
  (if (null? clauses)
      `false
      (let ((first (car clauses))
	    (rest (cdr clauses)))
	(if (cond-else-clause? first)
	    (if (null? rest)
		(if (have=>? (cond-actions first))
		    (apply (get=>action first) (apply (cond-predicate first)))
		    (sequence->exp (cond-actions first)))
		(error "ELSE clause isn't last -- COND->IF"))
	    (make-if (cond-predicate first)
		     ( (get=>action first) ( (cond-predicate first)))
		     (expand-clauses rest))))))
