(define (interleave s t)
  (if (stream-null? s)
      t
      (cons-stream (stream-car s)
		   (interleave t (stream-cdr s)))))
(define (pairs s t)
  (cons-stream (list (stream-car s) (stream-car t))
	       (interleave (stream-map (lambda (x) (list (stream-car s) x))
				       (stream-cdr t))
			   (pairs (stream-cdr s) (stream-cdr t)))))
(define (triples s t u)
  (cons-stream (list (stream-car s) (stream-car t) (stream-car u))
	       (interleave (stream-map (lambda (x) (cons (stream-car s) x))
				       (pairs (stream-cdr t) (stream-cdr u)))
			   (triples (stream-cdr s) (stream-cdr t) (stream-cdr u)))))


(define (triples-pair tri-stream)
  (define (squ x)
    (* x x))
  (define (jud pair)
    (let ((a (car pair))
	  (b (cadr pair))
	  (c (caddr pair)))
      (if (= (+ (squ a) (squ b)) (squ c))
	  pair
	  #f)))
  (if (jud (stream-car tri-stream))
      (cons-stream (stream-car tri-stream)
		   (triples-pair (stream-cdr tri-stream)))
      (triples-pair (stream-cdr tri-stream))))
