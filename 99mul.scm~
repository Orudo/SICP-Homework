(define ones (cons-stream 1 ones))
(define ints
  (cons-stream 1 (add-stream ints ones)))
(define (add-stream s1 s2)
  (cons-stream (+ (stream-car s1) (stream-car s2))
	       (add-stream (stream-cdr s1) (stream-cdr s2))))
(define (make-scheme n)
  (define (iter k)
    (if (> k n)
	`over
	(begin
	  (stream-filter (lambda (x) (< x (* k k)))
			 (stream-scale ints k))
	  (iter (+ k 1)))))
  (iter 1))
  
