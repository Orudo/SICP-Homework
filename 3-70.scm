(define (weighted-merge s t weight)
  (let ((ele-s (stream-car s))
	(ele-t (stream-car t)))
    (cond ((stream-null? s) t)
	  ((stream-null? t) s)
	  ((weight ele-s ele-t) (cons-stream ele-s (weighted-merge (stream-cdr s) t)))
	  ((weight ele-t ele-s) (cons-stream ele-t (weighted-merge s (stream-cdr t))))
	  (else (cons-stream ele-s (weighted-merge (stream-cdr s) (stream-cdr t)))))))
(define (weighted-pair-a s t weight)
  (cons-stream (list (stream-car s ) (stream-car t))
	       (weighted-merge (stream-map (lambda (x) (list (stream-car s) x))
					   (stream-cdr t))
			       (weighted-pair-a (stream-cdr s) (stream-cdr t) weight)
			       weight)))
(define (weighted-pair-b s t weight)
  (define (jud x)
    (or (= (remainder x 2)0)  (= (remainder x 3)0)  (=(remainder x 5)0)))
  (if (jud x)
      (cons-stream (list (stream-car s) (stream-car t))
		   (weighted-merge (stream-map (lambda (x) (list (stream-car s) x))
					       (stream-cdr t))
				   (weighted-pair-b (stream-cdr s) (stream-cdr t) weight)
				   weight))
      (weight-merge (stream-map (lambda (x) (list (stream-car s) x))
				(stream-filter jud (stream-cdr t)))
		    (weighted-pair-b (stream-cdr s) (stream-cdr t) weight))))
(define (weight-a a b)
  (define (pair+ pair)
    (+ (car pair) (cadr pair)))
  (if (< (pair+ a) (pair+ b))
      #t
      #F))
(define (weight-b a b)
  (define (pair-proc pair)
    (+ (* 2 (car pair)) (* 3 (cadr pair)) (* 5 (car pair) (cadr pair))))
  (if (< (pair-proc a) (pair-proc b))
      #t
      #f))
  
		    
      
